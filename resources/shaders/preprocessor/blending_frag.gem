#version 450 core

// multiple render targets - renders to AlphaBuffer
layout(location = 0) out vec4 Accum;
layout(location = 1) out float Reveal;

in VS_OUT {
    vec3 fragPosition;
    vec3 fragNormal;
    vec3 diffuseCoords;
    vec3 normalCoords;
    bool hasNormal;
    vec3 specularCoords;
    bool hasSpecular;
    flat int materialNumber;
    mat3 tbnMat;
} fs_in;

// imports
##[fragments/materialData] //! #include "fragments/materialData.gem"
##[fragments/textureData] //! #include "fragments/textureData.gem"


uniform sampler2DArray textureLib;

uniform mat4 inverseViewMat;

uniform vec3 cameraPos;
uniform vec3 lightPos;


void main() {
    vec3 fragPosition = (inverseViewMat * vec4(fs_in.fragPosition, 1.0)).xyz;
    Material mat = materialTable[fs_in.materialNumber];

    vec3 lightColor = vec3(1.0);
    vec3 ambient = mat.colorAmbient.rgb * lightColor;
    
    // unit reads
    vec3 normal = fs_in.hasNormal ? 
        normalize(fs_in.tbnMat * vec3(texture(textureLib, fs_in.normalCoords).rgb * 2.0 - 1.0)) :
        fs_in.fragNormal;

    float texSpecular = fs_in.hasSpecular ? 
        texture(textureLib, fs_in.specularCoords).r : 
        1.0;
    

    vec3 diffuse = vec3(0.0);
    vec3 specular = vec3(0.0);
    
    // diffuse
    normal = normalize(normal);
    vec3 lightDir = normalize(lightPos - fragPosition);
    float diff = max(dot(lightDir, normal), 0.0);
    diffuse = diff * lightColor;
        
    // specular
    float kEnergyConservation = (8.0 + mat.shininess) / (8.0 * 3.14159265);
    vec3 viewDir = normalize(cameraPos - fragPosition);

    // blinn-phong shading impl
    vec3 halfwayDir = normalize(lightDir + viewDir);
    float specularFactor = max(dot(normal, halfwayDir), 0.0);
    specularFactor = texSpecular * kEnergyConservation * pow(specularFactor, mat.shininess);

    specular = specularFactor * lightColor;
    
    vec3 color = texture(textureLib, fs_in.diffuseCoords).rgb;
    vec3 totalLight = vec3(ambient + diffuse * mat.colorDiffuse.rgb + specular * mat.colorSpecular.rgb);
    vec4 result = vec4(color * totalLight, mat.opacity);
    
    // weight function
    float weight = clamp(pow(min(1.0, result.a * 10.0) + 0.01, 3.0) * 1e8 * 
                         pow(1.0 - gl_FragCoord.z * 0.9, 3.0), 1e-2, 3e3);

    // store pixel color accumulation and pixel revealage threshold
    Accum = vec4(result.rgb * result.a, result.a) * weight;
    Reveal = result.a;
}