#version 450 core
out vec4 FragColor;

in VS_OUT {
    vec3 fragPosition;
    vec3 fragNormal;
    vec2 texCoords;
    flat int materialNumber;
} fs_in;

// imports
##[fragments/materialData] //! #include "fragments/materialData.gem"
##[fragments/textureData] //! #include "fragments/textureData.gem"


uniform sampler2DArray textureLib;

uniform mat4 inverseViewMat;

uniform vec3 cameraPos;
uniform vec3 lightPos;


void main() {
    vec3 fragPosition = (inverseViewMat * vec4(fs_in.fragPosition, 1.0)).xyz;

    Material mat = materialTable[fs_in.materialNumber];
    Texture tex = textureTable[mat.textureId];
    TextureView view = textureViewTable[tex.textureViewId];

    vec3 lightColor = vec3(1.0);
    vec3 ambient = vec3(0.1);
    
    // diffuse
    vec3 norm = normalize(fs_in.fragNormal);
    vec3 lightDir = normalize(lightPos - fragPosition);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
    
    // specular
    float specularStrength = 0.8;
    
    vec3 viewDir    = normalize(cameraPos - fragPosition);
    vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(norm, halfwayDir), 0.0), 64.0);
    vec3 specular = specularStrength * spec * lightColor; 
    
    vec3 diffuseCoords = getTexUnitCoords(textureLib, vec3(fs_in.texCoords, 0), view, diffuse_unit_index);
    vec3 color = texture(textureLib, diffuseCoords).rgb;
    vec3 totalLight = (ambient + diffuse + specular);
    

    const float gamma = 1.0;
    vec4 fragColor = vec4(color.x * totalLight.x, color.y * totalLight.y, color.z * totalLight.z, 1.0);
    FragColor = vec4(pow(fragColor.xyz, vec3(1.0 / gamma)), 1.0);
}