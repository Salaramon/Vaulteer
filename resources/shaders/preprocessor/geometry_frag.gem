#version 450

// multiple render targets - renders to GBuffer
layout(location = 0) out vec3 gPosition;
layout(location = 1) out vec4 gNormal;
layout(location = 2) out vec4 gColor;


in VS_OUT {
    vec3 fragPosition;
    vec3 fragNormal;
    vec3 diffuseCoords;
    vec3 normalCoords;
    bool hasNormal;
    vec3 specularCoords;
    bool hasSpecular;
    flat int materialNumber;
    mat3 tbnMat;
} fs_in;

##[fragments/materialData] //! #include "fragments/materialData.gem"
##[fragments/textureData] //! #include "fragments/textureData.gem"

uniform sampler2DArray textureLib;

void main() {
    Material mat = materialTable[fs_in.materialNumber];

    vec3 normal = fs_in.hasNormal ? 
        normalize(fs_in.tbnMat * vec3(texture(textureLib, fs_in.normalCoords).rgb * 2.0 - 1.0)) :
        fs_in.fragNormal;

    float specular = fs_in.hasSpecular ? 
        texture(textureLib, fs_in.specularCoords).r : 
        1.0;
        
    gPosition = fs_in.fragPosition;
    gNormal = vec4(normal, float(fs_in.materialNumber));
    gColor = vec4(texture(textureLib, fs_in.diffuseCoords).rgb, specular);
}
