#version 450

// multiple render targets - renders to GBuffer
layout(location = 0) out vec3 gPosition;
layout(location = 1) out vec4 gNormal;
layout(location = 2) out vec4 gColor;


in VS_OUT {
    vec3 fragPosition;
    vec3 fragNormal;
    vec2 texCoords;
    flat int materialNumber;
    mat3 tbnMat;
} fs_in;

##[fragments/materialData] //! #include "fragments/materialData.gem"
##[fragments/textureData] //! #include "fragments/textureData.gem"

uniform sampler2DArray textureLib;

void main() {
    Material mat = materialTable[fs_in.materialNumber];
    Texture tex = textureTable[mat.textureId];
    TextureView diffuseView = textureViewTable[tex.textureViewId];
    TextureView normalsView = textureViewTable[tex.textureViewId + normals_unit_index];
    TextureView specularView = textureViewTable[tex.textureViewId + specular_unit_index];

    vec3 texCoords = vec3(fs_in.texCoords, 0);
    vec3 diffuseCoords = getTexUnitCoords(textureLib, texCoords, diffuseView, diffuse_unit_index);

    vec3 normal;
    if (vec2(normalsView.wDelta, normalsView.hDelta) != vec2(0.0)) { // normal map exists?
        vec3 normalCoords = getTexUnitCoords(textureLib, texCoords, normalsView, normals_unit_index);
        normal = normalize(fs_in.tbnMat * vec3(texture(textureLib, normalCoords).rgb * 2.0 - 1.0));
    }
    else
        normal = fs_in.fragNormal;

    float specular;
    if (vec2(specularView.wDelta, specularView.hDelta) != vec2(0.0)){ // specular map exists?
        vec3 specularCoords = getTexUnitCoords(textureLib, texCoords, specularView, specular_unit_index);
        specular = texture(textureLib, specularCoords).r;
    }
    else 
        specular = 0.8;
        
    gPosition = fs_in.fragPosition;
    gNormal = vec4(normal, float(fs_in.materialNumber));
    gColor = vec4(texture(textureLib, diffuseCoords).rgb, specular);
}
