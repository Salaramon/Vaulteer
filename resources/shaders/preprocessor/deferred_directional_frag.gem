#version 450 core
out vec4 FragColor;

flat in int instanceID;

// imports
##[fragments/dirLightData] //! #include "fragments/dirLightData.gem"
##[fragments/materialData] //! #include "fragments/materialData.gem"


// constants
const int NUM_CASCADES = 1;

// shadow offset optimization
const vec3 sampleOffsetDirections[20] = vec3[] (
   vec3( 1,  1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1,  1,  1),
   vec3( 1,  1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1,  1, -1),
   vec3( 1,  1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1,  1,  0),
   vec3( 1,  0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1,  0, -1),
   vec3( 0,  1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0,  1, -1)
);

// gbuffer data
uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D gColor;

// shadow cascade maps
uniform sampler2D shadowMap_0;
uniform sampler2D shadowMap_1;
uniform sampler2D shadowMap_2;

uniform mat4 lightSpaceMatrices[NUM_CASCADES];
uniform float cascadeFarPlanes[NUM_CASCADES];

uniform usampler2DArray shadowTexture;


// uniforms

uniform vec3 worldCameraPos;
uniform mat4 cameraView;

uniform vec3 fogColor;


struct FragParams {
    vec3 position;
    vec3 normal;
    int materialIndex;
    float specIntensity;
} params;

// functions

sampler2D getShadowMap(int cascadeIndex) {
    switch(cascadeIndex) {
    case 0: return shadowMap_0;
    case 1: return shadowMap_1;
    case 2: return shadowMap_2;
    default: return shadowMap_0;
    }
}

float calcShadow(vec3 fragPos, vec3 normal, mat4 lightSpaceMat, sampler2D shadowMap, vec3 lightDirection, float farPlane) {
    vec4 fragPosLightSpace = lightSpaceMat * vec4(fragPos, 1.0);

    // perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    projCoords = projCoords * 0.5 + 0.5;

    if(projCoords.z > 1.0)
        return 0.0;
    
    float currentDepth = projCoords.z;
    
    float bias = max(0.02 * (1.0 - dot(normal, lightDirection)), 0.005) * (currentDepth);

    float shadow = 0.0;
    vec2 texelSize = (15.0 / farPlane) / textureSize(shadowMap, 0);

    int sampling = 2;
    for(int x = -sampling; x <= sampling; ++x) {
        for(int y = -sampling; y <= sampling; ++y) {
            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += ((currentDepth - bias) > pcfDepth ? 1.0 : 0.0);        
        }    
    }
    shadow /= pow(sampling * 2 + 1, 2.0);
    return shadow;
}

float calcLightInternal(FragParams p, BaseLight light, vec3 lightDir) {
    Material mat = materialTable[p.materialIndex];

    float ambient = light.ambientIntensity;
    float diffuse = 0.0;
    float specular = 0.0;
    
    // diffuse
    float diff = max(dot(p.normal, -lightDir), 0.0);
    diffuse = diff * light.diffuseIntensity;
        
    // specular
    float kEnergyConservation = (8.0 + mat.shininess) / (8.0 * 3.14159265);
    vec3 viewDir = normalize(worldCameraPos - p.position);

    // blinn-phong shading impl
    vec3 halfwayDir = normalize(viewDir - lightDir);
    float specularFactor = max(dot(p.normal, halfwayDir), 0.0);
    specularFactor = p.specIntensity * kEnergyConservation * pow(specularFactor, mat.shininess / 5.0);

    specular = specularFactor;

    return (ambient + diffuse + specular);
}

float calcDirectionalLight(FragParams p, DirectionalLight dirLight) {
    vec3 lightDirection = normalize(dirLight.direction);
    return calcLightInternal(p, dirLight.light, lightDirection);
}


void main() {
    const float gamma = 1.0;

    DirectionalLight dirLight = getDirLight(instanceID);

    // -------- reading from GBuffer --------
    
    ivec2 coords = ivec2(gl_FragCoord.xy);
    vec3 positionSample = texelFetch(gPosition, coords, 0).xyz;
    vec4 normalSample = texelFetch(gNormal, coords, 0);
    vec4 colorSample = texelFetch(gColor, coords, 0);

    // ------------- aggregation ------------

    params.position = vec4(inverse(cameraView) * vec4(positionSample, 1.0)).xyz;
    
    params.normal = normalSample.xyz;
    params.materialIndex = int(normalSample.w);

    vec3 diffuse = colorSample.rgb;
    params.specIntensity = colorSample.a;

    // --------------------------------------
 
    float fragDepth = abs((cameraView * vec4(params.position, 1.0)).z);

    vec3 totalLight;
    bool shadow = texelFetch(shadowTexture, ivec3(coords, instanceID), 0).r > 0.0;
    if (shadow) {
        totalLight = dirLight.light.ambientIntensity * dirLight.light.color;
    }
    else {
        float dirLightShadowFactor = 1.0; // used for shadow map - see comment under
        totalLight = calcDirectionalLight(params, dirLight) * dirLight.light.color;
    }
    
    // kinda hdr impl
    totalLight = vec3(min(totalLight.x, 1.0), min(totalLight.y, 1.0), min(totalLight.z, 1.0)) + 
                 vec3(max(0.0,totalLight.x / 5.0 - 1.0), max(0.0,totalLight.y / 5.0 - 1.0), max(0.0,totalLight.z / 5.0 - 1.0));
                 
    vec4 fragColor = vec4(diffuse.x * totalLight.x, diffuse.y * totalLight.y, diffuse.z * totalLight.z, 1.0);
    FragColor = vec4(pow(fragColor.xyz, vec3(1.0 / gamma)), 1.0);
}

// shadow calc
    
/*int cascadeIndex = 0;
for (int i = 0; i < NUM_CASCADES; i++) {
    if (fragDepth < cascadeFarPlanes[i]) {
        cascadeIndex = i;
        break;
    }
    cascadeIndex = NUM_CASCADES; 
}

float dirLightShadow = cascadeIndex > -1 ? 
        calcShadow(position, normal, lightSpaceMatrices[cascadeIndex], getShadowMap(cascadeIndex), directionalLight.direction, cascadeFarPlanes[cascadeIndex]) :
        0.0; 

float dirLightShadowFactor = (1.0 - dirLightShadow / 1.5);*/
