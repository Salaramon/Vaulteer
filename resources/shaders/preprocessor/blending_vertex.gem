#version 450 core
##[fragments/vertexFormat] //! #include "fragments/vertexFormat.gem"

out VS_OUT {
    vec3 fragPosition;
    vec3 fragNormal;
    vec3 diffuseCoords;
    vec3 normalCoords;
    bool hasNormal;
    vec3 specularCoords;
    bool hasSpecular;
    flat int materialNumber;
    mat3 tbnMat;
} vs_out;

uniform mat4 model;
uniform mat4 view;
uniform mat4 normal;

layout (std140, binding = 0) uniform Camera {
    uniform mat4 projection;
};

##[fragments/materialData] //! #include "fragments/materialData.gem"
##[fragments/textureData] //! #include "fragments/textureData.gem"

uniform sampler2DArray textureLib;

void main() {
    vs_out.fragPosition = (view * model * vec4(aPos, 1.0)).xyz;
    vs_out.fragNormal = (normal * vec4(aNormal, 0.0)).xyz;
    vs_out.materialNumber = aMaterialNumber;

    vec3 T = normalize(vec3(model * vec4(aTangent,   0.0)));
    vec3 B = normalize(vec3(model * vec4(aBitangent, 0.0)));
    vec3 N = normalize(vec3(model * vec4(aNormal,    0.0)));
    mat3 TBN = mat3(T, B, N);
    vs_out.tbnMat = TBN;
       
    gl_Position = projection * view * model * vec4(aPos, 1.0);

    
    // calculate textures
    Material mat = materialTable[aMaterialNumber];
    Texture tex = textureTable[mat.textureId];
    TextureView diffuseView = textureViewTable[tex.textureViewId];
    TextureView normalsView = textureViewTable[tex.textureViewId + normals_unit_index];
    TextureView specularView = textureViewTable[tex.textureViewId + specular_unit_index];
    
    vs_out.diffuseCoords = getTexUnitCoords(textureLib, vec3(aTexCoords, 0), diffuseView);
    vs_out.hasNormal = normalsView.wDelta != 0.0;
    vs_out.normalCoords = getTexUnitCoords(textureLib, vec3(aTexCoords, 0), normalsView);
    vs_out.hasNormal = specularView.wDelta != 0.0;
    vs_out.specularCoords = getTexUnitCoords(textureLib, vec3(aTexCoords, 0), specularView);
}
