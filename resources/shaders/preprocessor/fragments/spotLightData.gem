//? #version 450 core 
##[fragments/baseLight.gem] //! #include "baseLight.gem"

const int MAX_SPOT_LIGHTS = %%[maxSpotLights:int]; //! const int MAX_SPOT_LIGHTS = 1;

struct SpotLight {
    BaseLight light;
    Attenuation att;
    vec3 position;
    float radius;
    vec3 direction;
    float angle;
    mat4 lightSpaceMatrix;
};

struct UBSpotLight {
    vec4 color;
    //float ambientIntensity;
    float diffuseIntensity;
    float aConstant;
    float aLinear;
    float aQuadratic;
    vec4 position;
    //float radius;
    vec4 direction;
    //float angle;
    mat4 lightSpaceMatrix;
};

layout(shared, binding = 6) uniform SpotLightData {
    uniform UBSpotLight spotLightTable[MAX_SPOT_LIGHTS];
};

SpotLight getSpotLight(int spotLightIndex) {
    UBSpotLight ubl = spotLightTable[spotLightIndex];
    SpotLight l;
    l.light.color = ubl.color.xyz;
    l.light.ambientIntensity = ubl.color.w;
    l.light.diffuseIntensity = ubl.diffuseIntensity;
    l.att.aConstant = ubl.aConstant;
    l.att.aLinear = ubl.aLinear;
    l.att.aQuadratic = ubl.aQuadratic;
    l.position = ubl.position.xyz;
    l.radius = ubl.position.w;
    l.direction = ubl.direction.xyz;
    l.angle = ubl.direction.w;
    l.lightSpaceMatrix = ubl.lightSpaceMatrix;
    return l;
}