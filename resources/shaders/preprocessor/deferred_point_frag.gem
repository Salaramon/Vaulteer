#version 450 core
out vec4 FragColor;

flat in int instanceID;

// imports
##[fragments/camera] //! #include "fragments/camera.gem"
##[fragments/pointLightData] //! #include "fragments/pointLightData.gem"
##[fragments/materialData] //! #include "fragments/materialData.gem"


// constants
const int NUM_CASCADES = 1;


const vec3 sampleOffsetDirections[20] = vec3[]
(
   vec3( 1,  1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1,  1,  1),
   vec3( 1,  1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1,  1, -1),
   vec3( 1,  1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1,  1,  0),
   vec3( 1,  0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1,  0, -1),
   vec3( 0,  1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0,  1, -1)
);

// gbuffer data
uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D gColor;

// shadow cascade maps
uniform sampler2D shadowMap_0;
uniform sampler2D shadowMap_1;
uniform sampler2D shadowMap_2;

uniform mat4 lightSpaceMatrices[NUM_CASCADES];
uniform float cascadeFarPlanes[NUM_CASCADES];

uniform sampler2D shadowSpotMap_0;
uniform sampler2D shadowSpotMap_1;
uniform sampler2D shadowSpotMap_2;
uniform sampler2D shadowSpotMap_3;
//uniform mat4 spotLightSpaceMatrices[MAX_SPOT_LIGHTS];

// shadow cube maps
uniform samplerCube shadowCubeMap_0;
uniform samplerCube shadowCubeMap_1;
uniform samplerCube shadowCubeMap_2;
uniform samplerCube shadowCubeMap_3;

uniform float cubeMapFarPlanes[1];


// uniforms

uniform vec3 worldCameraPos;

uniform vec3 fogColor;


struct FragParams {
    vec3 position; 
    vec3 normal; 
    int materialIndex;
    float specIntensity;
} params;

// functions


float rand(vec2 co) {
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

sampler2D getShadowMap(int cascadeIndex) {
    switch(cascadeIndex) {
    case 0: return shadowMap_0;
    case 1: return shadowMap_1;
    case 2: return shadowMap_2;
    default: return shadowMap_0;
    }
}

sampler2D getSpotShadowMap(int spotIndex) {
    switch(spotIndex) {
    case 0: return shadowSpotMap_0;
    case 1: return shadowSpotMap_1;
    case 2: return shadowSpotMap_2;
    case 3: return shadowSpotMap_3;
    default: return shadowSpotMap_0;
    }
}

samplerCube getShadowCubeMap(int pointLightIndex) {
    switch(pointLightIndex) {
    case 0: return shadowCubeMap_0;
    case 1: return shadowCubeMap_1;
    case 2: return shadowCubeMap_2;
    case 3: return shadowCubeMap_3;
    default: return shadowCubeMap_0;
    }
}

float calcShadow(vec3 fragPos, vec3 normal, mat4 lightSpaceMat, sampler2D shadowMap, vec3 lightDir, float farPlane) {
    vec4 fragPosLightSpace = lightSpaceMat * vec4(fragPos, 1.0);

    // perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    projCoords = projCoords * 0.5 + 0.5;

    if(projCoords.z > 1.0)
        return 0.0;
    
    float currentDepth = projCoords.z;
    
    float bias = max(0.02 * (1.0 - dot(normal, lightDir)), 0.005) * (currentDepth);

    float shadow = 0.0;
    vec2 texelSize = (15.0 / farPlane) / textureSize(shadowMap, 0);

    int sampling = 2;
    for(int x = -sampling; x <= sampling; ++x) {
        for(int y = -sampling; y <= sampling; ++y) {
            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += ((currentDepth - bias) > pcfDepth ? 1.0 : 0.0);        
        }    
    }
    shadow /= pow(sampling * 2 + 1, 2.0);
    return shadow;
}

float calcShadowCube(vec3 fragPos, samplerCube shadowCubeMap, int pointLightIndex) {
    // get vector between fragment position and light position
    vec3 fragToLight = fragPos - getPointLight(pointLightIndex).position;
    // use the light to fragment vector to sample from the depth map
    float currentDepth = length(fragToLight);

    // now test for shadows
    float bias = 0.1;
    float shadow = 0.0;

    int samples = 20;
    float viewDistance = length(worldCameraPos - fragPos);
    float diskRadius = 0.05;
    for(int i = 0; i < samples; ++i)
    {
        float closestDepth = texture(shadowCubeMap, fragToLight + sampleOffsetDirections[i] * diskRadius).r;
        closestDepth *= cubeMapFarPlanes[pointLightIndex];   // undo mapping [0;1]
        if(currentDepth - bias > closestDepth)
            shadow += 1.0;
    }
    shadow /= float(samples);  

    return shadow;
}

vec3 calcLightInternal(FragParams p, BaseLight light, vec3 lightDir, float shadow) {
    Material mat = materialTable[p.materialIndex];

    vec3 ambient = light.color * light.ambientIntensity;
    vec3 diffuse = vec3(0.0);
    vec3 specular = vec3(0.0);
    
    // diffuse
    float diff = max(dot(p.normal, -lightDir), 0.0);
    diffuse = diff * light.color * light.diffuseIntensity;
        
    // specular
    float kEnergyConservation = (8.0 + mat.shininess) / (8.0 * 3.14159265);
    vec3 viewDir = normalize(worldCameraPos - p.position);

    // blinn-phong shading impl
    vec3 halfwayDir = normalize(viewDir - lightDir);
    float specularFactor = max(dot(p.normal, halfwayDir), 0.0);
    specularFactor = p.specIntensity * kEnergyConservation * pow(specularFactor, mat.shininess / 5.0);

    specular = specularFactor * light.color;

    float adjustFactor = max(ambient.r + diffuse.r + specular.r, ambient.g + diffuse.g + specular.g);
          adjustFactor = max(ambient.b + diffuse.b + specular.b, adjustFactor);
          adjustFactor = max(adjustFactor, 1.0);

    return (ambient + diffuse + specular) * adjustFactor;
}

vec3 calcPointLightInternal(FragParams p, BaseLight light, Attenuation att, vec3 lightDir, float radius, float lightDistance) {
    const float pointLightAngleDropoff = 0.20; // determines light fade rate at edge

    if (lightDistance > radius)
        return vec3(0.0);

    float radiusCutoffFactor = min(1.0, (radius - lightDistance) / (radius * pointLightAngleDropoff));

    //return vec4(max(radius - lightDistance * 2.5, 0.0)) + vec4(0, 0.1, 0, 0);
    //return vec4((radius - lightDistance) / (radius * pointLightAngleDropoff));

    lightDir = normalize(lightDir);

    float attenuation = 1 / (att.aConstant
        + att.aLinear * lightDistance
        + 0.1 *att.aQuadratic * (lightDistance * lightDistance));

    //attenuation = 1.0 * radiusCutoffFactor;

    return (calcLightInternal(p, light, lightDir, 0.0) * attenuation) * radiusCutoffFactor;
}

vec3 calcPointLight(FragParams p, PointLight pointLight) {
    vec3 lightDir = p.position - pointLight.position;
    float lightDistance = length(lightDir);

    return calcPointLightInternal(p, pointLight.light, pointLight.att, lightDir, pointLight.radius, lightDistance);
}


void main() {
    const float gamma = 1.0;
    
    PointLight light = getPointLight(instanceID);

    // -------- reading from GBuffer --------
    
    ivec2 coords = ivec2(gl_FragCoord.xy);
    vec3 positionSample = texelFetch(gPosition, coords, 0).xyz;
    vec4 normalSample = texelFetch(gNormal, coords, 0);
    vec4 colorSample = texelFetch(gColor, coords, 0);

    // ------------- aggregation ------------

    params.position = vec4(inverse(view) * vec4(positionSample, 1.0)).xyz;
    
    params.normal = normalSample.xyz;
    params.materialIndex = int(normalSample.w);

    vec3 diffuse = colorSample.rgb;
    params.specIntensity = colorSample.a;

    // --------------------------------------

    /*Material mat = materialData[1];

    switch (int(gl_FragCoord.y)) {
        case 4*0:  FragColor = vec4(mat.colorAmbient.x); break;
        case 4*1:  FragColor = vec4(mat.colorAmbient.y); break;
        case 4*2:  FragColor = vec4(mat.colorAmbient.z); break;
        case 4*3:  FragColor = vec4(mat.colorAmbient.w); break;
        case 4*4:  FragColor = vec4(mat.colorDiffuse.x); break;
        case 4*5:  FragColor = vec4(mat.colorDiffuse.y); break;
        case 4*6:  FragColor = vec4(mat.colorDiffuse.z); break;
        case 4*7:  FragColor = vec4(mat.colorDiffuse.w); break;
        case 4*8:  FragColor = vec4(mat.colorSpecular.x); break;
        case 4*9:  FragColor = vec4(mat.colorSpecular.y); break;
        case 4*10: FragColor = vec4(mat.colorSpecular.z); break;
        case 4*11: FragColor = vec4(mat.colorSpecular.w); break;
        case 4*12: FragColor = vec4(mat.shininess / 256.0); break;
        case 4*13: FragColor = vec4(mat.opacity); break;
        case 4*14: FragColor = vec4(mat.pad.x); break;
        case 4*15: FragColor = vec4(mat.pad.y); break;
    }
    if (gl_FragCoord.y < 64) return;*/
    
    //mat4 lightSpaceMatrix;
     
    //FragColor = vec4(colorSample.a); //spec demo
    //FragColor = vec4(diffuse.rgb, 1.0); // diffuse demo
    //diffuse = vec3(-normalSample.rgb); // normal demo
    //FragColor = vec4(diffuse, 1.0);
    //return;
 
    float fragDepth = abs((view * vec4(params.position, 1.0)).z);

    // shadow calc

    float pointLightShadow = 0.0;//calcShadowCube(position, getShadowCubeMap(i), i);
    
    vec3 totalLight = calcPointLight(params, light) * (1.0 - pointLightShadow);

    //float fogFactor = min(fragDepth / 20.0, 1.0);
    //vec4 fog = vec4((vec3(1.0) - vec3(1.0-fogColor.r, 1.0-fogColor.g, 1.0-fogColor.b) * fogFactor), 1.0);
    //vec4 fragColor = mix(totalLight, fog, fogFactor);

    // kinda hdr impl
    
    totalLight = vec3(min(totalLight.x, 1.0), min(totalLight.y, 1.0), min(totalLight.z, 1.0)) + 
                 vec3(max(0.0,totalLight.x / 5.0 - 1.0), max(0.0,totalLight.y / 5.0 - 1.0), max(0.0,totalLight.z / 5.0 - 1.0));
                 
    vec4 fragColor = vec4(diffuse.x * totalLight.x, diffuse.y * totalLight.y, diffuse.z * totalLight.z, 1.0);
    FragColor = vec4(pow(fragColor.xyz, vec3(1.0 / gamma)), 1.0);
}
